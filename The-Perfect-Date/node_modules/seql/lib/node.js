'use strict';function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { 'default': obj };}var _assert = require('assert');var _assert2 = _interopRequireDefault(_assert);var _sqlLibNode = require(
'sql/lib/node');var _sqlLibNode2 = _interopRequireDefault(_sqlLibNode);var _database = require(
'./database');var _database2 = _interopRequireDefault(_database);

_proxyDatabase('executeQuery', 'exec');
_proxyDatabase('streamQuery', 'stream');

function _proxyDatabase(method) {

  _sqlLibNode2['default'].prototype[method] = function () {

    (0, _assert2['default'])(this.sql instanceof _database2['default'], 'Cannot get database');
    return this.sql[method](this);};


  // Alias for easy access
  var _iteratorNormalCompletion = true;var _didIteratorError = false;var _iteratorError = undefined;try {for (var _len = arguments.length, aliases = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {aliases[_key - 1] = arguments[_key];}for (var _iterator = aliases[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {var alias = _step.value;
      _sqlLibNode2['default'].prototype[alias] = _sqlLibNode2['default'].prototype[method];}} catch (err) {_didIteratorError = true;_iteratorError = err;} finally {try {if (!_iteratorNormalCompletion && _iterator['return']) {_iterator['return']();}} finally {if (_didIteratorError) {throw _iteratorError;}}}}