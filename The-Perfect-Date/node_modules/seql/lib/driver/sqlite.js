'use strict';Object.defineProperty(exports, '__esModule', { value: true });var _createClass = (function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ('value' in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};})();var _get = function get(_x, _x2, _x3) {var _again = true;_function: while (_again) {var object = _x, property = _x2, receiver = _x3;desc = parent = getter = undefined;_again = false;if (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {var parent = Object.getPrototypeOf(object);if (parent === null) {return undefined;} else {_x = parent;_x2 = property;_x3 = receiver;_again = true;continue _function;}} else if ('value' in desc) {return desc.value;} else {var getter = desc.get;if (getter === undefined) {return undefined;}return getter.call(receiver);}}};function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { 'default': obj };}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError('Cannot call a class as a function');}}function _inherits(subClass, superClass) {if (typeof superClass !== 'function' && superClass !== null) {throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}var _sqlite3 = require('sqlite3');var _sqlite32 = _interopRequireDefault(_sqlite3);var _driver = require(
'./driver');var _driver2 = _interopRequireDefault(_driver);

// Enable verbose debugging
_sqlite32['default'].verbose();

var _streamWait = 4;var 

SqliteDriver = (function (_Driver) {_inherits(SqliteDriver, _Driver);function SqliteDriver() {_classCallCheck(this, SqliteDriver);_get(Object.getPrototypeOf(SqliteDriver.prototype), 'constructor', this).apply(this, arguments);}_createClass(SqliteDriver, [{ key: '_connect', value: 
    function _connect(config) {

      return new Promise(function (resolve, reject) {

        var storagePath = config.storage;
        // If the config is a string grab the path part
        if (typeof config === 'string') {
          storagePath = (/:\/\/(.*)$/.exec(config) || [])[1];}

        resolve(new _sqlite3.Database(storagePath));});} }, { key: 'executeQuery', value: 


    function executeQuery(_ref) {var _this = this;var text = _ref.text;var values = _ref.values;

      return new Promise(function (resolve, reject) {return _this.db.all(text, values, function (error, rows) {

          if (error) {return reject(error);}
          resolve(rows);});});}


    // TODO: is this the best implementation?
  }, { key: 'streamQuery', value: function streamQuery(_ref2, stream) {var text = _ref2.text;var values = _ref2.values;

      var finished = false;
      // The row buffer
      var rows = [];
      var currentRowIndex = 0;

      this.db.each(text, values, function (error, row) {

        if (error) {return strem.emit('error', error);}
        rows.push(row);}, 
      function (error) {

        finished = true;
        if (error) {return strem.emit('error', error);}});


      stream._read = function () {var _this2 = this;

        if (finished && rows.length - 1 === currentRowIndex) {return this.push(null);}

        var retrieveInterval = setInterval(function () {

          // If the row is not yet in the buffer, wait
          if (rows.length - 1 < currentRowIndex) {return;}

          _this2.push(rows[currentRowIndex]);
          currentRowIndex += 1;
          clearInterval(retrieveInterval);}, 
        _streamWait);};} }]);return SqliteDriver;})(_driver2['default']);exports['default'] = 




SqliteDriver;module.exports = exports['default'];