'use strict';Object.defineProperty(exports, '__esModule', { value: true });var _createClass = (function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ('value' in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};})();var _get = function get(_x, _x2, _x3) {var _again = true;_function: while (_again) {var object = _x, property = _x2, receiver = _x3;desc = parent = getter = undefined;_again = false;if (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {var parent = Object.getPrototypeOf(object);if (parent === null) {return undefined;} else {_x = parent;_x2 = property;_x3 = receiver;_again = true;continue _function;}} else if ('value' in desc) {return desc.value;} else {var getter = desc.get;if (getter === undefined) {return undefined;}return getter.call(receiver);}}};function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { 'default': obj };}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError('Cannot call a class as a function');}}function _inherits(subClass, superClass) {if (typeof superClass !== 'function' && superClass !== null) {throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass);}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;}var _assert = require('assert');var _assert2 = _interopRequireDefault(_assert);var _stream = require(
'stream');var _debug = require(
'debug');var _debug2 = _interopRequireDefault(_debug);var _sql = require(
'sql');var _driver = require(
'./driver');

var debug = new _debug2['default']('seql');
var debugQuery = new _debug2['default']('seql:query');var 

Database = (function (_Sql) {_inherits(Database, _Sql);
  function Database(connectionConfig) {var _this = this;_classCallCheck(this, Database);

    var dialect = connectionConfig.dialect;

    // If using a url e.g. 'mysql://user:pass@host/db' we need to parse out the dialect
    if (typeof connectionConfig === 'string') {
      dialect = (/^(.*?):\/\//.exec(connectionConfig) || [])[1];}


    (0, _assert2['default'])(typeof dialect === 'string', 'Must provide a string dialect');

    _get(Object.getPrototypeOf(Database.prototype), 'constructor', this).call(this, dialect);

    this.connectionConfig = connectionConfig;

    // Setup the connection promise
    this.connection = new Promise(function (resolve, reject) {

      debug('Connecting to a ' + _this.dialectName + ' database');

      var driver = (0, _driver.getDriver)(_this.dialectName);

      driver.connect(_this.connectionConfig)['catch'](
      reject).
      then(function () {return resolve(driver);});});


    this.connection['catch'](function (error) {throw error;});}_createClass(Database, [{ key: 'setDialect', value: 

    function setDialect() {

      // Set the dialect if it does not exist
      if (!this.dialect) {return _get(Object.getPrototypeOf(Database.prototype), 'setDialect', this).apply(this, arguments);}

      // Disable dialect from being changed
      throw new Error('Cannot change dialect');}

    // TODO: one day, in a world without `babel/polyfill`s this can use async/await
  }, { key: 'executeQuery', value: function executeQuery(query) {var _this2 = this;

      query = query.toQuery();

      debugQuery(query.text);

      return new Promise(function (resolve, reject) {

        _this2.connection.
        then(function (driver) {return driver.executeQuery(query);}).
        then(resolve);});} }, { key: 'streamQuery', value: 


    function streamQuery(query) {

      query = query.toQuery();

      debugQuery(query.text);

      var stream = new _stream.Readable({ objectMode: true });
      stream._read = function () {/* Silence... */};

      this.connection.
      then(function (driver) {return driver.streamQuery(query, stream);});

      return stream;} }]);return Database;})(_sql.Sql);exports['default'] = 



Database;module.exports = exports['default'];